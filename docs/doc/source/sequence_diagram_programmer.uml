@startuml
actor User
participant Programmer
participant Program
participant Controller
participant Arduino
participant Serial_coms

== start up ==

User->Programmer:           init(program_name)
activate Programmer
Programmer->Program:        init()
activate Program

== single command ==

User->Programmmer:          teachInsertBelSelected()
User->Program:              add_command(new_cmd, pos)
User->Programmer:           run_program()
Programmer->Controller:     executeProgram(program)
activate Controller
' controller->Serial_coms:    init()
Controller->Arduino:        send_command('SOMESTRING')
activate Arduino
Arduino->]:                 servo controller 
Arduino->Controller:        'SOMESTRING_RESPONSE'
deactivate Arduino
deactivate Controller


== multible commands ==

User->Programmer:           teachInsertBelSelected()
User->Programmer:           teachInsertBelSelected()
User->Programmer:           teachInsertBelSelected()
User->Programmer:           run_program()
Programmer->Controller:     executeProgram(program)
activate Controller
Controller->Arduino:        send_command('SOMESTRING')
activate Arduino
Arduino->]:                 servo controller 
Arduino->Controller:        'SOMESTRING_RESPONSE'
deactivate Arduino
Controller->Arduino:        send_command('SOMESTRING')
activate Arduino
Arduino->]: servo controller 
Arduino->Controller:        'SOMESTRING_RESPONSE'
deactivate Arduino
Controller->Arduino:        send_command('SOMESTRING')
activate Arduino
Arduino->]: servo controller 
Arduino->Controller:        'SOMESTRING_RESPONSE'
deactivate Arduino
deactivate Controller

== single command - controller active ==

User->Programmer:           teachInsertBelSelected()
User->Programmer:           run_program()


Programmer->Controller:     executeProgram(program)
activate Controller
Controller->Programmer:     if running; return

Programmer->Controller:     run_program()
Controller->Arduino:        send_command('SOMESTRING')
activate Arduino

User->Programmer:           run_program()
Programmer->Controller:     executeProgram(program)
Controller->Programmer:     return
' Programmer->User:           error: controller is buzy

Arduino->]: servo controller 
Arduino->Controller:        'SOMESTRING_RESPONSE'
deactivate Arduino
deactivate Controller

== multible command - request for stop ==

User->Programmer:           teachInsertBelSelected()
User->Programmer:           teachInsertBelSelected()
User->Programmer:           teachInsertBelSelected()
User->Programmer:           run_program()
Programmer->Controller:     run_program()
activate Controller
Controller->Arduino:        send_command('SOMESTRING')
activate Arduino
Arduino->]:                 servo controller 
Arduino->Controller:        'SOMESTRING_RESPONSE'
deactivate Arduino

Controller->Controller:     if controller.stop 

Controller->Arduino:        send_command('SOMESTRING')
activate Arduino
Arduino->]:                 servo controller 

User->Programmer:           stop_program()
Programmer->Controller:     controller.stop = True

Arduino->Controller:        'SOMESTRING_RESPONSE'
deactivate Arduino

Controller->Controller:     if controller.stop 
deactivate Controller

@enduml

